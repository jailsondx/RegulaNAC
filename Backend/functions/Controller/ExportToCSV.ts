/// <reference types="node" />
//const { createObjectCsvWriter: createCsvWriter } = require('csv-writer');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;
const path = require('path');
const fs = require('fs');

// Defini√ß√£o do diret√≥rio onde os arquivos CSV ser√£o salvos
const BASE_CSV_PATH = path.join(__dirname, '../../Relatorios');

// Certifica-se de que o diret√≥rio existe
if (!fs.existsSync(BASE_CSV_PATH)) {
    fs.mkdirSync(BASE_CSV_PATH, { recursive: true });
}

// Fun√ß√£o para exportar os dados para CSV
async function exportarRelatorioCSVPaciente(dados) {
    try {
        if (dados.length === 0) {
            throw new Error('Nenhum dado dispon√≠vel para exporta√ß√£o.');
        }

        // Define o nome do arquivo com base na data/hora
        const fileName = `Relatorio-${Date.now()}.csv`;
        const filePath = path.join(BASE_CSV_PATH, fileName);

        // Configura√ß√£o do cabe√ßalho do CSV
        const csvWriter = createCsvWriter({
            path: filePath,
            header: [
                { id: 'nome_regulador_nac', title: 'Regulador NAC' },
                { id: 'nome_paciente', title: 'Nome do Paciente' },
                { id: 'num_prontuario', title: 'N√∫mero Prontu√°rio' },
                { id: 'num_regulacao', title: 'N√∫mero Regula√ß√£o' },
                { id: 'un_origem', title: 'Unidade de Origem' },
                { id: 'un_destino', title: 'Unidade de Destino' },
                { id: 'prioridade', title: 'Prioridade' },
                { id: 'data_nascimento', title: 'Data de Nascimento' },
                { id: 'num_idade', title: 'Idade' },
                { id: 'data_hora_solicitacao_01', title: 'Solicita√ß√£o Inicial' },
                { id: 'data_hora_solicitacao_02', title: 'Solicita√ß√£o Final' },
                { id: 'nome_regulador_medico', title: 'Regulador M√©dico' },
                { id: 'data_hora_acionamento_medico', title: 'Acionamento M√©dico' },
                { id: 'data_hora_regulacao_medico', title: 'Regula√ß√£o M√©dico' },
                { id: 'status_regulacao', title: 'Status' },
                { id: 'transporte_nome_colaborador', title: 'Respons√°vel Transporte' },
                { id: 'desfecho', title: 'Desfecho' },
                { id: 'criticidade', title: 'Criticidade' },
                { id: 'fastmedic', title: 'FastMedic' }
            ]
        });

        // Escreve os dados no CSV
        await csvWriter.writeRecords(dados);

        console.log(`‚úÖ Relat√≥rio CSV gerado com sucesso em: \n${filePath}`);
        //return {filePath};
        return filePath;
    } catch (error) {
        console.error('‚ùå Erro ao gerar o relat√≥rio CSV:', error);
        throw new Error('Erro ao gerar o relat√≥rio CSV.');
    }
}

// üìÇ **Fun√ß√£o de Exporta√ß√£o para CSV**
async function exportarRelatorioCSVGerencial(dados) {
    try {
        if (dados.length === 0) {
            throw new Error('Nenhum dado dispon√≠vel para exporta√ß√£o.');
        }

        // üìù Nome do arquivo CSV
        const fileName = `Relatorio-${Date.now()}.csv`;
        const filePath = path.join(BASE_CSV_PATH, fileName);

        // üìë **Configura√ß√£o do CSV**
        const csvWriter = createCsvWriter({
            path: filePath,
            header: [
                { id: 'un_destino', title: 'UNIDADE DE DESTINO' },
                { id: 'especificacao', title: 'ESPECIFICA√á√ÉO' },
                { id: 'valor_absoluto', title: 'VALOR ABSOLUTO' },
            ]
        });

        // ‚úçÔ∏è **Escrever os dados no CSV**
        await csvWriter.writeRecords(dados);

        console.log(`‚úÖ Relat√≥rio CSV gerado com sucesso em:\n${filePath}`);
        return filePath;
    } catch (error) {
        console.error('‚ùå Erro ao gerar o relat√≥rio CSV:', error);
        throw new Error('Erro ao gerar o relat√≥rio CSV.');
    }
}

module.exports = {
                exportarRelatorioCSVPaciente,
                exportarRelatorioCSVGerencial
                };
